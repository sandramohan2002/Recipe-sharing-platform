# Generated by Django 3.2.25 on 2025-02-13 06:50

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('status', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.AutoField(primary_key=True, serialize=False)),
                ('review_id', models.IntegerField(blank=True, null=True)),
                ('user_id', models.IntegerField()),
                ('comment_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('mobile', models.CharField(blank=True, max_length=15, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('diet_preference', models.CharField(choices=[('veg', 'Vegetarian'), ('non_veg', 'Non-Vegetarian'), ('vegan', 'Vegan'), ('pescatarian', 'Pescatarian'), ('other', 'Other')], default='other', max_length=20)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('allergies', models.TextField(blank=True, null=True)),
                ('cooking_experience', models.CharField(blank=True, max_length=50, null=True)),
                ('favorite_cuisine', models.CharField(blank=True, max_length=100, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('is_blocked', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('event_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField()),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('cooking_class', 'Cooking Class'), ('workshop', 'Workshop'), ('tasting', 'Food Tasting'), ('competition', 'Cooking Competition'), ('seminar', 'Culinary Seminar')], default='workshop', max_length=50)),
                ('event_date', models.DateField()),
                ('event_time', models.TimeField()),
                ('location', models.CharField(max_length=200)),
                ('max_participants', models.IntegerField(default=10)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('contact_email', models.EmailField(default='example@email.com', max_length=254)),
                ('contact_phone', models.CharField(default='1234567890', max_length=15)),
                ('duration_hours', models.IntegerField(default=1)),
                ('duration_minutes', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, null=True, upload_to='events/')),
                ('current_participants', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='upcoming', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'events',
                'ordering': ['event_date', 'event_time'],
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=10)),
                ('event', models.CharField(choices=[('italian', 'Italian Cuisine Workshop'), ('bread', 'Bread Making Masterclass'), ('photography', 'Food Photography Session')], max_length=20)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('ingredient_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('substitutions', models.TextField(blank=True)),
                ('category_id', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='login',
            fields=[
                ('login_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=30, unique=True)),
                ('password', models.CharField(max_length=30)),
                ('reset_token', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NutritionalInformation',
            fields=[
                ('nutritional_info_id', models.AutoField(primary_key=True, serialize=False)),
                ('recipe_id', models.IntegerField()),
                ('calories', models.FloatField(blank=True, null=True)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('fat', models.FloatField(blank=True, null=True)),
                ('carbohydrates', models.FloatField(blank=True, null=True)),
                ('sugar', models.FloatField(blank=True, null=True)),
                ('fiber', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('user_id', models.IntegerField()),
                ('recipe_id', models.AutoField(primary_key=True, serialize=False)),
                ('recipename', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField()),
                ('image', models.ImageField(upload_to='recipes/')),
                ('servings', models.CharField(max_length=200)),
                ('prep_time', models.IntegerField()),
                ('cook_time', models.IntegerField()),
                ('timing', models.DurationField(blank=True, null=True)),
                ('tags', models.TextField(max_length=200)),
                ('category_id', models.IntegerField()),
                ('subcategory_id', models.IntegerField(null=True)),
                ('nutritional_info_id', models.IntegerField(blank=True, null=True)),
                ('difficulty', models.CharField(blank=True, choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10, null=True)),
                ('image_category', models.CharField(blank=True, max_length=50, null=True)),
                ('category_confidence', models.FloatField(blank=True, null=True)),
                ('ingredients', models.ManyToManyField(to='recipe.Ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.AutoField(primary_key=True, serialize=False)),
                ('recipe_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('review_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'recipe_review',
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('subcategory_id', models.AutoField(primary_key=True, serialize=False)),
                ('category_id', models.IntegerField()),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Subcategories',
                'unique_together': {('category_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='RecipeAllergen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe_id', models.IntegerField()),
                ('allergen_name', models.CharField(choices=[('dairy', 'Dairy'), ('eggs', 'Eggs'), ('nuts', 'Tree Nuts'), ('peanuts', 'Peanuts'), ('shellfish', 'Shellfish'), ('wheat', 'Wheat'), ('soy', 'Soy'), ('fish', 'Fish'), ('gluten', 'Gluten'), ('sesame', 'Sesame')], max_length=50)),
                ('severity', models.CharField(choices=[('contains', 'Contains'), ('may_contain', 'May Contain'), ('traces', 'Traces')], max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'recipe_allergens',
                'unique_together': {('recipe_id', 'allergen_name')},
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('recipe_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('rating', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'unique_together': {('recipe_id', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('recipe_id', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'recipe_favorites',
                'unique_together': {('user_id', 'recipe_id')},
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('measurement', models.CharField(max_length=20)),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recipe.ingredient')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_ingredients', to='recipe.recipe')),
            ],
            options={
                'unique_together': {('recipe', 'ingredient')},
            },
        ),
    ]
